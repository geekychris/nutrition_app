name: Release Build

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: false
        default: ''

jobs:
  build-archive:
    name: Build and Archive
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Increment build number
      run: |
        chmod +x scripts/increment_build.sh
        ./scripts/increment_build.sh
        
    - name: Import certificates
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
    - name: Import provisioning profile
      if: ${{ secrets.PROVISIONING_PROFILE_BASE64 != '' }}
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Create provisioning profiles directory
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        
        # Import provisioning profile from secrets
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        
        # Copy to Xcode provisioning profiles directory
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Archive app
      run: |
        mkdir -p build
        
        xcodebuild archive \
          -project NutritionTracker.xcodeproj \
          -scheme NutritionTracker \
          -archivePath build/NutritionTracker.xcarchive \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          DEVELOPMENT_TEAM="${{ secrets.TEAM_ID || '' }}" \
          CODE_SIGN_STYLE="Automatic"
          
    - name: Export IPA (if certificates available)
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      run: |
        # Create exportOptions.plist
        cat > build/exportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/NutritionTracker.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist build/exportOptions.plist
          
    - name: Upload archive artifact
      uses: actions/upload-artifact@v4
      with:
        name: NutritionTracker-${{ steps.version.outputs.version }}-archive
        path: build/NutritionTracker.xcarchive
        retention-days: 30
        
    - name: Upload IPA artifact
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: NutritionTracker-${{ steps.version.outputs.version }}-ipa
        path: build/export/*.ipa
        retention-days: 90
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/export/*.ipa
        body: |
          Release ${{ steps.version.outputs.version }}
          
          ## Installation
          
          ### For TestFlight:
          1. Download the archive artifact
          2. Open Xcode → Window → Organizer
          3. Drag the `.xcarchive` to Organizer
          4. Click "Distribute App" and choose "App Store Connect"
          
          ### For Ad Hoc:
          1. Download the IPA file (if available)
          2. Install via Finder (macOS) or Apple Configurator
          
          ## Changes
          See commit history for details.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up keychain
      if: ${{ always() && secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
